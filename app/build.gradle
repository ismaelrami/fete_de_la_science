apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "fr.istic.m2il.mmm.fetescience"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.google.android.gms:play-services-maps:11.8.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:3.6.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    compile 'com.google.firebase:firebase-core:11.8.0'
    compile 'com.google.firebase:firebase-auth:11.8.0'
    compile 'com.google.firebase:firebase-database:11.8.0'
    implementation 'com.google.android.gms:play-services-maps:11.8.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.code.gson:gson:2.8.2'
    implementation 'com.j256.ormlite:ormlite-android:5.0'
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.facebook.android:facebook-share:[4,5)'
    compile 'com.android.support:support-annotations:27.0.2'
    compile('com.twitter.sdk.android:twitter:3.2.0@aar') {
        transitive = true
    }
    compile 'com.joanzapata.iconify:android-iconify-fontawesome:2.2.1' // (v4.5)
    compile 'com.joanzapata.iconify:android-iconify-entypo:2.2.1' // (v3,2015)
    compile 'com.joanzapata.iconify:android-iconify-typicons:2.2.1' // (v2.0.7)
    compile 'com.joanzapata.iconify:android-iconify-material:2.2.1' // (v2.0.0)
    compile 'com.joanzapata.iconify:android-iconify-material-community:2.2.1' // (v1.4.57)
    compile 'com.joanzapata.iconify:android-iconify-meteocons:2.2.1' // (latest)
    compile 'com.joanzapata.iconify:android-iconify-weathericons:2.2.1' // (v2.0)
    compile 'com.joanzapata.iconify:android-iconify-simplelineicons:2.2.1' // (v1.0.0)
    compile 'com.joanzapata.iconify:android-iconify-ionicons:2.2.1' // (v2.0.1)

}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'jacoco'
apply plugin: 'io.objectbox'

def coverageSourceDirs = [
        'src/main/java',
]

task jacocoTestReport(type: JacocoReport) {
    group = 'Reporting'
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class',
                       '**/BuildConfig.class',
                       '**/Manifest.class',
                       '**/Manifest*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec", "$buildDir/jacoco/testReleaseUnitTest.exec")

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
